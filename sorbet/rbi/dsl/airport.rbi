# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Airport`.
# Please instead update this file by running `bin/tapioca dsl Airport`.

class Airport
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Airport).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Airport]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Airport)) }
    def fifth; end

    sig { returns(::Airport) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Airport)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Airport) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Airport).void)
      ).returns(T.nilable(T::Enumerator[::Airport]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Airport]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Airport]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Airport)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Airport) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Airport) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Airport) }
    def first!; end

    sig { returns(T.nilable(::Airport)) }
    def forty_two; end

    sig { returns(::Airport) }
    def forty_two!; end

    sig { returns(T.nilable(::Airport)) }
    def fourth; end

    sig { returns(::Airport) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Airport) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Airport).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Airport).void)).returns(::Airport) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Airport).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Airport).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Airport)) }
    def second; end

    sig { returns(::Airport) }
    def second!; end

    sig { returns(T.nilable(::Airport)) }
    def second_to_last; end

    sig { returns(::Airport) }
    def second_to_last!; end

    sig { returns(::Airport) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Airport) }
    def take!; end

    sig { returns(T.nilable(::Airport)) }
    def third; end

    sig { returns(::Airport) }
    def third!; end

    sig { returns(T.nilable(::Airport)) }
    def third_to_last; end

    sig { returns(::Airport) }
    def third_to_last!; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def altitude; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def altitude=(value); end

    sig { returns(T::Boolean) }
    def altitude?; end

    sig { returns(T.nilable(::Integer)) }
    def altitude_before_last_save; end

    sig { returns(T.untyped) }
    def altitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def altitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def altitude_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def altitude_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def altitude_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def altitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def altitude_previous_change; end

    sig { returns(T::Boolean) }
    def altitude_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def altitude_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def altitude_was; end

    sig { void }
    def altitude_will_change!; end

    sig { returns(T.nilable(::String)) }
    def city; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def city=(value); end

    sig { returns(T::Boolean) }
    def city?; end

    sig { returns(T.nilable(::String)) }
    def city_before_last_save; end

    sig { returns(T.untyped) }
    def city_before_type_cast; end

    sig { returns(T::Boolean) }
    def city_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def city_changed?; end

    sig { returns(T.nilable(::String)) }
    def city_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def city_previous_change; end

    sig { returns(T::Boolean) }
    def city_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def city_previously_was; end

    sig { returns(T.nilable(::String)) }
    def city_was; end

    sig { void }
    def city_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country=(value); end

    sig { returns(T::Boolean) }
    def country?; end

    sig { returns(T.nilable(::String)) }
    def country_alpha2; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country_alpha2=(value); end

    sig { returns(T::Boolean) }
    def country_alpha2?; end

    sig { returns(T.nilable(::String)) }
    def country_alpha2_before_last_save; end

    sig { returns(T.untyped) }
    def country_alpha2_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_alpha2_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_alpha2_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_alpha2_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def country_alpha2_changed?; end

    sig { returns(T.nilable(::String)) }
    def country_alpha2_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_alpha2_previous_change; end

    sig { returns(T::Boolean) }
    def country_alpha2_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def country_alpha2_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_alpha2_was; end

    sig { void }
    def country_alpha2_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country_before_last_save; end

    sig { returns(T.untyped) }
    def country_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def country_changed?; end

    sig { returns(T.nilable(::String)) }
    def country_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_previous_change; end

    sig { returns(T::Boolean) }
    def country_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def country_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_was; end

    sig { void }
    def country_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def dst; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def dst=(value); end

    sig { returns(T::Boolean) }
    def dst?; end

    sig { returns(T.nilable(::String)) }
    def dst_before_last_save; end

    sig { returns(T.untyped) }
    def dst_before_type_cast; end

    sig { returns(T::Boolean) }
    def dst_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def dst_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def dst_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def dst_changed?; end

    sig { returns(T.nilable(::String)) }
    def dst_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def dst_previous_change; end

    sig { returns(T::Boolean) }
    def dst_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def dst_previously_was; end

    sig { returns(T.nilable(::String)) }
    def dst_was; end

    sig { void }
    def dst_will_change!; end

    sig { returns(T.nilable(::String)) }
    def iata; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def iata=(value); end

    sig { returns(T::Boolean) }
    def iata?; end

    sig { returns(T.nilable(::String)) }
    def iata_before_last_save; end

    sig { returns(T.untyped) }
    def iata_before_type_cast; end

    sig { returns(T::Boolean) }
    def iata_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def iata_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def iata_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def iata_changed?; end

    sig { returns(T.nilable(::String)) }
    def iata_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def iata_previous_change; end

    sig { returns(T::Boolean) }
    def iata_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def iata_previously_was; end

    sig { returns(T.nilable(::String)) }
    def iata_was; end

    sig { void }
    def iata_will_change!; end

    sig { returns(T.nilable(::String)) }
    def icao; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def icao=(value); end

    sig { returns(T::Boolean) }
    def icao?; end

    sig { returns(T.nilable(::String)) }
    def icao_before_last_save; end

    sig { returns(T.untyped) }
    def icao_before_type_cast; end

    sig { returns(T::Boolean) }
    def icao_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def icao_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def icao_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def icao_changed?; end

    sig { returns(T.nilable(::String)) }
    def icao_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def icao_previous_change; end

    sig { returns(T::Boolean) }
    def icao_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def icao_previously_was; end

    sig { returns(T.nilable(::String)) }
    def icao_was; end

    sig { void }
    def icao_will_change!; end

    sig { returns(T.untyped) }
    def id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.untyped) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.untyped) }
    def id_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.untyped) }
    def id_previously_was; end

    sig { returns(T.untyped) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def kind; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def kind=(value); end

    sig { returns(T::Boolean) }
    def kind?; end

    sig { returns(T.nilable(::String)) }
    def kind_before_last_save; end

    sig { returns(T.untyped) }
    def kind_before_type_cast; end

    sig { returns(T::Boolean) }
    def kind_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def kind_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def kind_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def kind_changed?; end

    sig { returns(T.nilable(::String)) }
    def kind_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def kind_previous_change; end

    sig { returns(T::Boolean) }
    def kind_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def kind_previously_was; end

    sig { returns(T.nilable(::String)) }
    def kind_was; end

    sig { void }
    def kind_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def latitude; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def latitude=(value); end

    sig { returns(T::Boolean) }
    def latitude?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def latitude_before_last_save; end

    sig { returns(T.untyped) }
    def latitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def latitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def latitude_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def latitude_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def latitude_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def latitude_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def latitude_previous_change; end

    sig { returns(T::Boolean) }
    def latitude_previously_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def latitude_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def latitude_was; end

    sig { void }
    def latitude_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def longitude; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def longitude=(value); end

    sig { returns(T::Boolean) }
    def longitude?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def longitude_before_last_save; end

    sig { returns(T.untyped) }
    def longitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def longitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def longitude_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def longitude_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def longitude_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def longitude_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def longitude_previous_change; end

    sig { returns(T::Boolean) }
    def longitude_previously_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def longitude_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def longitude_was; end

    sig { void }
    def longitude_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def passenger_volume; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def passenger_volume=(value); end

    sig { returns(T::Boolean) }
    def passenger_volume?; end

    sig { returns(T.nilable(::Integer)) }
    def passenger_volume_before_last_save; end

    sig { returns(T.untyped) }
    def passenger_volume_before_type_cast; end

    sig { returns(T::Boolean) }
    def passenger_volume_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def passenger_volume_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def passenger_volume_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def passenger_volume_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def passenger_volume_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def passenger_volume_previous_change; end

    sig { returns(T::Boolean) }
    def passenger_volume_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def passenger_volume_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def passenger_volume_was; end

    sig { void }
    def passenger_volume_will_change!; end

    sig { void }
    def restore_altitude!; end

    sig { void }
    def restore_city!; end

    sig { void }
    def restore_country!; end

    sig { void }
    def restore_country_alpha2!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_dst!; end

    sig { void }
    def restore_iata!; end

    sig { void }
    def restore_icao!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_kind!; end

    sig { void }
    def restore_latitude!; end

    sig { void }
    def restore_longitude!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_passenger_volume!; end

    sig { void }
    def restore_source!; end

    sig { void }
    def restore_timezone!; end

    sig { void }
    def restore_timezone_olson!; end

    sig { void }
    def restore_uid!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_altitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_altitude?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_city?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country; end

    sig { returns(T::Boolean) }
    def saved_change_to_country?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country_alpha2; end

    sig { returns(T::Boolean) }
    def saved_change_to_country_alpha2?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_dst; end

    sig { returns(T::Boolean) }
    def saved_change_to_dst?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_iata; end

    sig { returns(T::Boolean) }
    def saved_change_to_iata?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_icao; end

    sig { returns(T::Boolean) }
    def saved_change_to_icao?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_kind; end

    sig { returns(T::Boolean) }
    def saved_change_to_kind?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_latitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_latitude?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_longitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_longitude?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_passenger_volume; end

    sig { returns(T::Boolean) }
    def saved_change_to_passenger_volume?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_source; end

    sig { returns(T::Boolean) }
    def saved_change_to_source?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_timezone; end

    sig { returns(T::Boolean) }
    def saved_change_to_timezone?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_timezone_olson; end

    sig { returns(T::Boolean) }
    def saved_change_to_timezone_olson?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_uid; end

    sig { returns(T::Boolean) }
    def saved_change_to_uid?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def source; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def source=(value); end

    sig { returns(T::Boolean) }
    def source?; end

    sig { returns(T.nilable(::String)) }
    def source_before_last_save; end

    sig { returns(T.untyped) }
    def source_before_type_cast; end

    sig { returns(T::Boolean) }
    def source_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def source_changed?; end

    sig { returns(T.nilable(::String)) }
    def source_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_previous_change; end

    sig { returns(T::Boolean) }
    def source_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def source_previously_was; end

    sig { returns(T.nilable(::String)) }
    def source_was; end

    sig { void }
    def source_will_change!; end

    sig { returns(T.nilable(::String)) }
    def timezone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def timezone=(value); end

    sig { returns(T::Boolean) }
    def timezone?; end

    sig { returns(T.nilable(::String)) }
    def timezone_before_last_save; end

    sig { returns(T.untyped) }
    def timezone_before_type_cast; end

    sig { returns(T::Boolean) }
    def timezone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def timezone_changed?; end

    sig { returns(T.nilable(::String)) }
    def timezone_in_database; end

    sig { returns(T.nilable(::String)) }
    def timezone_olson; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def timezone_olson=(value); end

    sig { returns(T::Boolean) }
    def timezone_olson?; end

    sig { returns(T.nilable(::String)) }
    def timezone_olson_before_last_save; end

    sig { returns(T.untyped) }
    def timezone_olson_before_type_cast; end

    sig { returns(T::Boolean) }
    def timezone_olson_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_olson_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_olson_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def timezone_olson_changed?; end

    sig { returns(T.nilable(::String)) }
    def timezone_olson_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_olson_previous_change; end

    sig { returns(T::Boolean) }
    def timezone_olson_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def timezone_olson_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timezone_olson_was; end

    sig { void }
    def timezone_olson_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_previous_change; end

    sig { returns(T::Boolean) }
    def timezone_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def timezone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timezone_was; end

    sig { void }
    def timezone_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def uid; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def uid=(value); end

    sig { returns(T::Boolean) }
    def uid?; end

    sig { returns(T.nilable(::Integer)) }
    def uid_before_last_save; end

    sig { returns(T.untyped) }
    def uid_before_type_cast; end

    sig { returns(T::Boolean) }
    def uid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def uid_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def uid_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def uid_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def uid_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def uid_previous_change; end

    sig { returns(T::Boolean) }
    def uid_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def uid_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def uid_was; end

    sig { void }
    def uid_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_altitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country_alpha2?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dst?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_iata?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_icao?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_kind?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_latitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_longitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_passenger_volume?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_source?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_timezone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_timezone_olson?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_uid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Airport } }

    sig { returns(T::Array[::Airport]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Airport } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Airport } }

    sig do
      params(
        records: T.any(::Airport, T::Enumerable[T.any(::Airport, T::Enumerable[::Airport])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Airport, T::Enumerable[T.any(::Airport, T::Enumerable[::Airport])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Airport, T::Enumerable[T.any(::Airport, T::Enumerable[::Airport])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Airport, Integer, String, T::Enumerable[T.any(::Airport, Integer, String, T::Enumerable[::Airport])])
      ).returns(T::Array[::Airport])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Airport, Integer, String, T::Enumerable[T.any(::Airport, Integer, String, T::Enumerable[::Airport])])
      ).returns(T::Array[::Airport])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Airport]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Airport, T::Enumerable[T.any(::Airport, T::Enumerable[::Airport])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Airport, T::Enumerable[T.any(::Airport, T::Enumerable[::Airport])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Airport, T::Enumerable[T.any(::Airport, T::Enumerable[::Airport])])
      ).returns(T::Array[::Airport])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Airport]) }
    def target; end

    sig { returns(T::Array[::Airport]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Airport } }

    sig { returns(T::Array[::Airport]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Airport } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
